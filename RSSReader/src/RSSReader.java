import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Viraj Patel (patel.3450)
 * 
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        
        out.println("<head>");
        out.println("<title>");
        out.println(channel.child(getChildElement(channel, "title")).child(0).label());
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + channel.child(getChildElement(channel, "link")).child(0).label() + "\">" + 
        channel.child(getChildElement(channel, "title")).child(0).label() +"</a></h1>");
        out.println("<p>" + channel.child(getChildElement(channel, "description")).child(0).label() +"</p>");
        out.println("<table border=\"1\">");
		out.println("<tr>");
		out.println("<th>Date</th>");
		out.println("<th>Source</th>");
		out.println("<th>News</th>");
		out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        
        out.println("</table>");
		out.println("</body>");
		out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * TODO: fill in body
         */
        
        for(int i = 0; i < xml.numberOfChildren(); i++) {
        	if(xml.child(i).label().contentEquals(tag)) {
        		return 1;
        	}
        }
        return -1;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        
        out.println("<tr>");

        if (getChildElement(item, "pubDate") == -1) {
            out.println("<td>No date available</td>");
        } else {
            String pdc = item.child(getChildElement(item, "pubDate")).child(0).label();
            out.println("<td>" + pdc + "</td>");
        }

        if (getChildElement(item, "source") == -1) {
            out.println("<td>No source available</td>");
        } else {
            String url = item.child(getChildElement(item, "source")).attributeValue("url");
            String sc = item.child(getChildElement(item, "source")).child(0).label();
            out.println("<td><a href = " + url + ">" + sc
                    + "</a></td>");
        }

        if (getChildElement(item, "title") == -1) {
            String dc = item.child(getChildElement(item, "description")).child(0).label();
            
            if (getChildElement(item, "link") == -1) {
                out.println("<td>" + dc + "</td>");
            } else {
                String url = item.child(getChildElement(item, "link")).child(0).label();
                out.println("<td><a href = " + url + ">" + dc
                        + "</a></td>");
            }
        } else {
            String tc = item.child(getChildElement(item, "title")).child(0).label();
            
            if (getChildElement(item, "link") == -1) {
                out.println("<td>" + tc + "</td>");
            } else {
                String url = item.child(getChildElement(item, "link")).child(0).label();
                out.println("<td><a href = " + url + ">" + tc
                        + "</a></td>");
            }
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * TODO: fill in body
         */
        String version = null;
        
        out.println("Enter the url:");
        XMLTree tree = new XMLTree1(in.nextLine());
        
        if(tree.hasAttribute("version"))
        	version = tree.attributeValue("version");
        
        while(tree.label() != "rss" && !tree.hasAttribute("version") && version != "2.0") {
        	out.println("Incorrect RSS 2.0 Feed. \nEnter another url:");
        	tree = new XMLTree1(in.nextLine());
        }
        
        out.println("Enter the name of output file: ");
        SimpleWriter outfile = new SimpleWriter1L(in.nextLine());
        
        XMLTree channel = tree.child(0);
        outputHeader(channel, outfile);
        
        int item = getChildElement(channel, "item");
        if(item != 1) {
        	processItem(channel.child(item), outfile);
        	item++;
        	while(item<channel.numberOfChildren()) {
        		if(channel.child(item).label().equals("item")) {
        			processItem(channel.child(item), outfile);
        		}
        		item++;
        	}
     
        }
        outputFooter(outfile);
        out.println("Done");
        in.close();
        out.close();
    }

}